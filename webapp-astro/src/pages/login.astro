---
import Layout from '../layouts/Layout.astro';
import LoginForm from '../components/auth/LoginForm.astro';
import RegisterNewUserForm from '../components/auth/RegisterNewUserForm.astro';
import { validateUsername, validatePassword } from '../lib/validation';
import { createSupabaseAnon } from '../lib/supabase';

export const prerender = false;
const { cookies, redirect, request } = Astro;

let errorMessage = '';
try {
  if (request.method === 'POST') {
    //await new Promise((resolve) => setTimeout(resolve, 2000));
    const formData = await request.formData();
    console.log('ðŸš€ ~ formData:', formData);

    const email = String(formData.get('username'));
    const password = String(formData.get('password'));
    const loginType = String(formData.get('loginType'));
    const validationError =
      validateUsername(email) || validatePassword(password);
    if (validationError) return new Error(validationError);

    const supabaseAnon = createSupabaseAnon();
    if (loginType === 'register') {
      const confirmPassword = String(formData.get('confirm-password'));
      if (confirmPassword !== password) {
        throw new Error('Confirm Password does not match');
      }
      const { data: _, error } = await supabaseAnon.auth.signUp({
        email,
        password,
      });
      if (error) {
        console.log('ðŸš€ ~ signUp ~ error:', error);
        throw error;
      }
      return redirect('/login');
    } else {
      //login
      const { data, error } = await supabaseAnon.auth.signInWithPassword({
        email,
        password,
      });
      if (error) {
        console.log('ðŸš€ ~ signInWithPassword ~ error:', error);
        throw error;
      }
      cookies.set('access_token', data?.session?.access_token);
      cookies.set('refresh_token', data?.session?.refresh_token);
    }
    return redirect('/');
  }
} catch (err) {
  console.error(err);
  if (err instanceof Error) {
    errorMessage = err.message;
  }
}
---

<Layout>
  <main class='min-h-screen flex items-center justify-center bg-base-100'>
    <div
      class='bg-base-200 p-8 rounded-lg shadow-md w-full max-w-md'
      x-data='{ wantToLogin: true }'>
      <h1 class='text-2xl font-bold mb-6 text-center'>
        <span x-show='wantToLogin'>Login</span>
        <span x-show='!wantToLogin'>Register</span>
      </h1>
      <form method='post' class='space-y-6'>
        <input type='hidden' name='redirectTo' value='/' />
        <fieldset class='space-y-2'>
          <legend class='font-medium'>Login or Register?</legend>
          <div class='flex gap-4'>
            <label class='label'>
              <input
                type='radio'
                name='loginType'
                value='login'
                :checked='wantToLogin'
                class='text-blue-600'
                @input='wantToLogin=true'
              />
              <span>Login</span>
            </label>
            <label class='label'>
              <input
                type='radio'
                name='loginType'
                value='register'
                class='text-blue-600'
                @input='wantToLogin=false'
              />
              <span>Register</span>
            </label>
          </div>
        </fieldset>

        <template x-if='wantToLogin'>
          <LoginForm />
        </template>

        <template x-if='!wantToLogin'>
          <RegisterNewUserForm />
        </template>
      </form>
    </div>
  </main>
</Layout>
